<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">
	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />
	<context:component-scan base-package="main"/>
	<context:component-scan base-package="emp"/>
	<context:component-scan base-package="kr"/>
	<context:component-scan base-package="advanced"/>
	
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" /> 
	<resources location="/resources/images/" mapping="/myimg/**"/>

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<!-- ========================== 뷰리졸버 등록 ============================ -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="2"/>
	
	</beans:bean>

	<!-- ========================== db관련작업 ============================ -->
	<beans:bean id="ds"
		class="org.springframework.jndi.JndiObjectFactoryBean">
		<beans:property name="jndiName" value="jdbc/myspring" />
		<beans:property name="resourceRef" value="true" />
	</beans:bean>
	<beans:bean id="template" class="org.springframework.jdbc.core.JdbcTemplate">
		<beans:property name="dataSource" ref="ds" />
	</beans:bean>
	
	<!-- ========================== mybatis연결 ========================== -->
	<!-- spring과 mybatis를 연결해주는 클래스 -->
	<beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="ds"/>
		<beans:property name="configLocation" value="/WEB-INF/config/mybatis-config.xml"/>
	</beans:bean>
	
	<!-- mybatis의 핵심클래스(spring jdbc에서 JdbcTemplate의 역할을 하는 클래스) -->
	<beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg ref="sqlSessionFactory"/>
	</beans:bean>

	<!-- ======================== tiles를 사용하기 위한 설정 ========================== -->
	<!-- 1. tiles의 설정파일의 정보를 등록 -->
	<beans:bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<beans:property name="definitions">
			<beans:list>
				<beans:value>/WEB-INF/**/*-tiles.xml</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>
	<!-- 2. ViewResolver가 기본 jsp로 뷰를 생성하지 않고 tiles프레임워크를 통해서 뷰를 생성할 수 있도록 ViewResolver를 등록 -->
	<beans:bean id="tilesViewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
			<beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView"/>
			<beans:property name="order" value="1"/>
	</beans:bean>
	
	<!-- ======================== 인터셉터를 등록 ======================== -->
	<interceptors>
		<!-- <interceptor>
			<mapping path="/**"/>
			<beans:bean class="advanced.TimeCheckInterceptor"/>
		</interceptor> -->
		<!-- 인터셉트 추가시 이곳에 -->
		<interceptor>
			<mapping path="/**"/> 
			<beans:bean id="webContentInterceptor" class="org.springframework.web.servlet.mvc.WebContentInterceptor">
				<beans:property name="cacheSeconds" value="0" />
			</beans:bean>
		</interceptor>
		
		<interceptor>
			<mapping path="/read.do"/>
			<mapping path="/list.do"/>
			<!-- <mapping path="/board/**"/> -->
			<beans:bean class="advanced.LoginCheckInterceptor"/>
		</interceptor>
	</interceptors>
	
	
	<!-- ======================== 파일 업로드(id명반드시) ======================== -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="5000000"/>
		<beans:property name="defaultEncoding" value="UTF-8"/>
	</beans:bean>
	
	<!-- ======================== 국제화처리(다국어지원 - id명반드시) ======================== -->
	<!-- .properties파일에 입력한 내용을 읽어들여서 페이지에 출력할 메시지를 만들 수 있도록 지원해주는
		MessageSource등록  -->
	<beans:bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<beans:property name="basenames">
			<beans:list>
				<beans:value>/WEB-INF/i18n/message</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>
	<!-- Locale정보를 처리하기 위한 LocaleResolver를 등록(id명반드시)
		=> 쿠키정보에서 locale정보를 확인 -->
	<beans:bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver"/>	

	<!-- ======================== 선언적 트랜잭션 처리하기 ======================== -->
	<!-- 
		1. spring내부에서 jdbc를 이용해서 db작업할 때 트랜잭션 처리를 할 수 있도록 정의해놓은 클래스등록
			(Advice - 공통모듈: 여러 곳에서 트랜잭션 처리를 하기 때문)
			=> db와 연결되어 있어야 트랜잭션에 관련된 메소드를 실행할 수 있다. rollback이나 commit
	 -->	
	 <beans:bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	 	<beans:property name="dataSource" ref="ds"/>
	 </beans:bean>
	 <!-- 
	 	2. 내가 원하는 메소드가 호출될 때 트랜잭션 처리를 해야 하므로 aop로 처리
	 		(1번에서 등록한 빈이 Aspect될 수 있도록 처리)
	 	   1) Advice를 등록 - exception이 발생했을 때 rollback하겠다는 의미
	 	
	  -->
	 <tx:advice id="txAdvice" transaction-manager="transactionManager">
	 	<tx:attributes>
	 		<tx:method name="txinsert" rollback-for="Exception"/>
	 	</tx:attributes>
	 </tx:advice>
	 
	 <!-- 2) 실제로 우리가 작성한 advice가 실행될 수 있도록 aop설정 -->
	 <aop:config>
	 	<aop:pointcut 
	 		expression="execution(* kr.kitri.board.BoardServiceImpl.tx*(..))" 
	 		id="transpointcut"/>
	 	<aop:advisor advice-ref="txAdvice" pointcut-ref="transpointcut"/>
	 </aop:config>
	 
</beans:beans>




















